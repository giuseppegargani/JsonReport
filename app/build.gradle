//try to revert manually
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.barsali.file-diff' version '0.0.1-SNAPSHOT'
}
//applica il plugin
//apply plugin: GreetingPlugin
//apply from: "${project(':instrumentedreport').projectDir}/other.gradle"
//apply plugin: TestPlugin

android {
    compileSdk 32

    /*defaultConfig {
        applicationId "com.example.jsonreport"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }*/

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    /*testVariants.all { variant ->
        variant.connectedInstrumentTest.doLast {
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
        connectedAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
        assembleDebugAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
    }*/
}

fileDiff {

    file1 = file('app/libs/diff-util-0.0.1-SNAPSHOT.jar')
    file2 = file('app/libs/diff-util-0.0.1-SNAPSHOT.jar')

}

/*class GreetingPlugin implements Plugin<Project> {

    void apply(Project project) {
        project.android {

            defaultConfig {
                applicationId "com.example.jsonreport"
                minSdk 24
                targetSdk 32
                versionCode 1
                versionName "1.0"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            testVariants.all { variant ->
                variant.connectedInstrumentTest.doLast {
                    println "The name of the test type: $connectedInstrumentTest.name"
                    println "The type of test $connectedInstrumentTest.class"
                }
                project.connectedAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
                project.assembleDebugAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
            }

            testOptions {

                //testOrchestrator
                execution 'ANDROIDX_TEST_ORCHESTRATOR'

                unitTests.all {

                    ignoreFailures = true

                    beforeTest { descriptor ->
                        logger.lifecycle("Beppe Running test: " + descriptor)
                    }
                     afterTest { desc, result ->
                        logger.lifecycle("************ Beppe: NOME TEST: $desc e RISULTATO TEST: $result")
                    }

                    beforeSuite { desc ->
                        println("Si mette in ascolto $desc")
                    }
                    afterSuite { desc, result ->
                        if (!desc.parent) { // will match the outermost suite
                            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                            def startItem = '|  ', endItem = '  |'
                            def repeatLength = startItem.length() + output.length() + endItem.length()
                            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                        }
                    }
                    //granularitÃ  in console dei risultati del test (verificato e 3 corrisponde al singolo metodo)
                    testLogging {
                        minGranularity 3
                        maxGranularity 3
                    }
                    onOutput { descriptor, event ->
                        logger.lifecycle("Beppe Test: " + descriptor + " produced standard out/err: " + event.message )
                    }


                }


            }
        }


        project.task('hello') {
            doLast {
                println "${extension.message.get()} from ${extension.greeter.get()}"
            }
        }
    }
}*/

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':instrumentedreport')
}