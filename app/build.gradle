//try to revert manually
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.jsonreport"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    def thread = null

    testVariants.all { variant ->
        variant.connectedInstrumentTest.doLast {
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
//        connectedAndroidTest.finalizedBy(':app:passReport')
        assembleDebugAndroidTest.finalizedBy(':app:passReport')
        //assembleDebugAndroidTest.mustRunAfter(':app:passReport')
        tasks.getByPath(':instrumentedreport:passReport').mustRunAfter(':app:assembleDebugAndroidTest')
//        assembleDebugAndroidTest.dependsOn(primaAssembleDebug)
        //task(':instrumentedreport:passReport').dependsOn(':instrumentedreport:primaTask')
        //tasks.getByPath(':instrumentedreport:passReport').dependsOn(':instrumentedreport:primaTask')
        //tasks.getByPath(':instrumentedreport:compileDebugKotlin').finalizedBy(':instrumentedreport:passReport')
        //tasks.getByPath(':app:assembleDebug').finalizedBy(':instrumentedreport:passReport')
    }

    /*task primaAssembleDebug(){
        doLast {
            println("DIPENDENZA DELLA TASK ASSEMBLEDEBUGTEST")
        }
        thread = Thread.start {
            sleep(15000)
            println "completato il thread"
        }
    }*/


    //def thread = null

    //esiste da prima e non si puo' toccare (builtin task)
    task ciao (){
        doLast {
            println("ECCO LA TASK CIAO")
        }
        doLast {
            thread.join()
        }
    }

    task primadiciao() {
        doLast {
            println("DIPENDENZA DELLA TASK CIAO")
        }
        thread= Thread.start {
            sleep(3000)
            println "completato il thread"
        }
    }

    task passReport () {

        def nomeapp = 'nome'

        doLast {
            project(':app') {
                nomeapp = it.android.defaultConfig.applicationId
                println "buildV:::: $nomeapp"
            }
        }
        /*doLast {
            thread.join()
        }*/
//        thread= Thread.start {
//            sleep(5000)
//            //println "completato il thread"
//            doLast {
//                try{
//                    exec {
//                        //copia il file da emulatore a directory locale
//                        commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
//                    }
//                    //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                    //e legge per verifica
//                    //String fileContents = new File('JsonTestReport.json').text
//                    //println(fileContents)
//                } catch(all){
//                    println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                }
//            }
//        }
//        doLast {
//            thread.join()
//        }
        doLast {
            try{
                exec {
                    //copia il file da emulatore a directory locale
                    commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                }
                //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                //e legge per verifica
                //String fileContents = new File('JsonTestReport.json').text
                //println(fileContents)
            } catch(all){
                println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
            }
        }
        //esegue il comando
        //commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.tests_vari.ExampleInstrumentedTest', 'com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'shell', 'cat', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb', 'pull', 'sdcard/android/data/com.example.reportroot/files/JsonTestReport.json', '../'
        //parent.name
    }

//    allprojects{
//        //ciao.dependsOn(primadiciao)
//        //connectedAndroidTest.finalizedBy(':app:passReport')
//        assembleDebugAndroidTest.finalizedBy(':app:passReport')
//    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':instrumentedreport')
}