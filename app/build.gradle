//try to revert manually
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}


android {

    // Apply the plugin
    apply plugin: GreetingPlugin
    //apply from: "${project(':instrumentedreport').projectDir}/GreetingPlugin"

    compileSdk 32

    defaultConfig {
        applicationId "com.example.jsonreport"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testVariants.all { variant ->
        variant.connectedInstrumentTest.doLast {
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
        connectedAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
        assembleDebugAndroidTest.finalizedBy(':instrumentedreport:ucoodeTest')
        //tasks.getByPath(':instrumentedreport:ucoodeTest').finalizedBy(test)
        //test.finalizedBy(':instrumentedreport:peppe')
        //test.finalizedBy(':instrumentedreport:peppe')
        //tasks.getByPath(':instrumentedreport:peppe').finalizedBy(test)
        //test.dependsOn(':instrumentedreport:peppe')
    }
/*    project(':instrumentedreport') {
        callback(':instrumentedreport:peppe')
    }*/

    tasks.register('configure') {
        doLast {
            def pos = new java.text.FieldPosition(10)
            // Apply the script
            apply from: 'annesso.gradle', to: pos
            println pos.beginIndex
            println pos.endIndex
        }
    }
    tasks.register(':peppeprimo'){
        doLast {
            def x = 2
            apply from: 'annesso.gradle', to: x
            println("valore letto dal file ${x.beginIndex}")
        }
    }

    //ma questo si puo' ulteriormente semplificare importando la task direttamente?
    //SI POSSONO LEGGERE ANCHE DIVERSI FILE DI SCRIPT!!!!!!
    task michele(){
        doLast {
            //apply from: '../instrumentedreport/other.gradle'
            //apply from: "${project(':instrumentedreport').projectDir}/other.gradle"
            //callback('a')
            //primo()
            //def docu = new java.text.FieldPosition(10)
            apply from: 'annesso.gradle'//, to: docu
            conf()
            println beginIndex
        }
        doLast {
            println("ESEGUITO DOPO")
        }
    }


    //le due tasks peppe
    /*task peppe() {
        configure {
            testOptions {

            //testOrchestrator
            execution 'ANDROIDX_TEST_ORCHESTRATOR'

            unitTests.all {

                afterTest { desc, result ->
                    logger.lifecycle("************ Beppe: NOME TEST: $desc e RISULTATO TEST: $result")
                }
            }
        }

        }

        doFirst {
            println("DoFIRST DI BEPPE")
        }
        doLast {
            println("DOLAST DI BEPPE")
        }
    }*/

    /*peppe {
        testOptions {

            //testOrchestrator
            execution 'ANDROIDX_TEST_ORCHESTRATOR'

            unitTests.all {

                afterTest { desc, result ->
                    logger.lifecycle("************ Beppe: NOME TEST: $desc e RISULTATO TEST: $result")
                }
            }
        }
    }*/

}
class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('hello') {
            doLast {
                println 'Hello from the GreetingPlugin'
            }
        }
    }
}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':instrumentedreport')
}