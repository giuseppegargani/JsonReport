//try to revert manually
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.barfuin.gradle.taskinfo' version '1.0.5'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.jsonreport"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    def thread = null

    testVariants.all { variant ->
        variant.connectedInstrumentTest.doLast {
            println "The name of the test type: $connectedInstrumentTest.name"
            println "The type of test $connectedInstrumentTest.class"
        }
        connectedAndroidTest.finalizedBy(':app:ucoodeTest')
        assembleDebugAndroidTest.finalizedBy(':app:ucoodeTest')
        //assembleDebugAndroidTest.mustRunAfter(':app:passReport')
        tasks.getByPath(':instrumentedreport:passReport').mustRunAfter(':app:assembleDebugAndroidTest')
//        assembleDebugAndroidTest.dependsOn(primaAssembleDebug)
        //task(':instrumentedreport:passReport').dependsOn(':instrumentedreport:primaTask')
        //tasks.getByPath(':instrumentedreport:passReport').dependsOn(':instrumentedreport:primaTask')
        //tasks.getByPath(':instrumentedreport:compileDebugKotlin').finalizedBy(':instrumentedreport:passReport')
        //tasks.getByPath(':app:assembleDebug').finalizedBy(':instrumentedreport:passReport')

//        tasks.whenTaskAdded { task ->
//            if (task.class.simpleName == 'KotlinCompile_Decorated') {
//                task.finalizedBy {
//                    try{
//                        exec {
//                            //copia il file da emulatore a directory locale
//                            commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
//                        }
//                        //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                        //e legge per verifica
//                        //String fileContents = new File('JsonTestReport.json').text
//                        //println(fileContents)
//                        println("RIUSCITO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//                    } catch(all){
//                        println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                    }
//                }
//            }
//        }



        tasks.whenTaskAdded { task ->
            task.finalizedBy {
                    try{
                        exec {
                            //copia il file da emulatore a directory locale
                            commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                        }
                        //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                        //e legge per verifica
                        //String fileContents = new File('JsonTestReport.json').text
                        //println(fileContents)
                        //println("RIUSCITO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                    } catch(all){
                        println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                    }
            }
        }

    }

    /*task primaAssembleDebug(){
        doLast {
            println("DIPENDENZA DELLA TASK ASSEMBLEDEBUGTEST")
        }
        thread = Thread.start {
            sleep(15000)
            println "completato il thread"
        }
    }*/


    //def thread = null

    //esiste da prima e non si puo' toccare (builtin task)
    task ciao (){
        doLast {
            println("ECCO LA TASK CIAO")
        }
        doLast {
            thread.join()
        }
    }

    task primadiciao() {
        doLast {
            println("DIPENDENZA DELLA TASK CIAO")
        }
        thread= Thread.start {
            sleep(3000)
            println "completato il thread"
        }
    }

    task passReport () {

        def nomeapp = 'nome'

        doLast {
            project(':app') {
                nomeapp = it.android.defaultConfig.applicationId
                println "buildV:::: $nomeapp "
            }
        }
        /*doLast {
            thread.join()
        }*/
//        thread= Thread.start {
//            sleep(5000)
//            //println "completato il thread"
//            doLast {
//                try{
//                    exec {
//                        //copia il file da emulatore a directory locale
//                        commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
//                    }
//                    //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                    //e legge per verifica
//                    //String fileContents = new File('JsonTestReport.json').text
//                    //println(fileContents)
//                } catch(all){
//                    println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                }
//            }
//        }
//        doLast {
//            thread.join()
//        }
        doLast {
            try{
                exec {
                    //copia il file da emulatore a directory locale
                    //commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                    commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', "${nomeapp}.ExampleInstrumentedTest", "${nomeapp}.test/androidx.test.runner.AndroidJUnitRunner" , '&&', 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json"

                }
                //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                //e legge per verifica
                //String fileContents = new File('JsonTestReport.json').text
                //println(fileContents)
            } catch(all){
                println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
            }
        }
        //esegue il comando
        //commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.tests_vari.ExampleInstrumentedTest', 'com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'shell', 'cat', 'sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb shell am instrument -w -e class com.example.tests_vari.ExampleInstrumentedTest com.example.tests_vari.test/androidx.test.runner.AndroidJUnitRunner && adb pull sdcard/android/data/com.example.tests_vari/files/giuseppe.txt'
        //commandLine 'adb', 'pull', 'sdcard/android/data/com.example.reportroot/files/JsonTestReport.json', '../'
        //parent.name
    }

//    allprojects{
//        //ciao.dependsOn(primadiciao)
//        //connectedAndroidTest.finalizedBy(':app:passReport')
//        assembleDebugAndroidTest.finalizedBy(':app:passReport')
//    }

    task saluti(){
        doLast {
            println("ECCO I SALUTI DA FARE DOPO I UNIT TEST")
        }
    }

    task ucoodeTest() {
        def nomeapp = 'nome'

        doLast {
            project(':app') {
                nomeapp = it.android.defaultConfig.applicationId
                println "buildV:::: $nomeapp"
            }
        }
        doLast {
            try{
                exec {
                    //copia il file da emulatore a directory locale
                    //commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                    commandLine 'adb', 'shell', 'am', 'instrument', '-w', '-e', 'class', 'com.example.jsonreport.ExampleInstrumentedTest com.example.jsonreport.test/androidx.test.runner.AndroidJUnitRunner'//, '&&', 'adb', 'pull', 'sdcard/android/data/com.example.jsonreport/files/JsonTestReport.json'
                }
                println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                //e legge per verifica
                String fileContents = new File('JsonTestReport.json').text
                println(fileContents)
            } catch(all){
                println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
            }
        }
        doLast {
            exec{
                commandLine 'adb', 'pull', 'sdcard/android/data/com.example.jsonreport/files/JsonTestReport.json', '../'
            }
        }
    }

//    tasks.withType(connectedAndroidTest) { task ->
//        task.finalizedBy(saluti)
//    }
//    tasks.getByPath(':app:assembleDebugAndroidTest') { task ->
//        task.finalizedBy(saluti)
//    }

//    allprojects {
//        tasks.whenTaskAdded { task ->
//            if (task.class.simpleName == 'DefaultTask_Decorated') {
//                //task.dependsOn doSomethingOnWhenBuildDebugCustom
//                println " Here it is!!!! Type is  ${task.class.simpleName} !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
//                task.finalizedBy { println ("Ecchime") }
//            } else {
//                println " No!!! Type is not! but another one: ${task.class.simpleName} "
//                task.finalizedBy { println ("not Ecchime") }
//            }
//
//        }
//    }

    def cli = {
        println("ECCOMI QUI")
    }


    allprojects {
//        tasks.withType(Test) { task ->
//            task.finalizedBy {
//                println ("QUELLO PRIMA ERA UN TIPO TEST !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//            }
//        }
//        tasks.whenTaskAdded { task ->
//            if (task == tasks.getByPath(':app:ucoodeTest')) {
//                task.finalizedBy(saluti)
//            }
//        }
//        tasks.getByPath(':app:ucoodeTest').finalizedBy(saluti)
//        tasks.whenTaskAdded { task ->
//            task.contains
//        }
//        tasks.contains('ExampleInstrumentedTest') { task ->
//            task.finalizedBy {
////                println ("QUELLO PRIMA ERA UN TIPO TEST !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//                println("task che contiene la stringa!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//            }
//        }

//            tasks.withType(Exec) {
////                doFirst {
////                    println commandLine
////                }
//                doLast {
//                    println ("DI TIPO EXEC")
//                }
//            }


//        task dentro() {
//            doLast {
//                //cli()
//                println("TIPO: ${ cli.class.simpleName }")
//            }
//        }

//        task testoinside() {
//            doLast {
//                cli()
//                println("TIPO: ${ cli.class.simpleName } dentro")
//                println("PROPRIETA': ${it } ")
//            }
//        }


        //A questa viene passato un parametro:    ./gradlew myTask -PmyArg=hello
        task myTask {
            doFirst {
                println myArg
                println ("ECCO IL PARAMETRO PASSATO: $myArg")

                //... do what you want
            }
        }
//        tasks.whenTaskAdded { t->
//            //println("I PARAMETRI PASSATI SONO: ${t.properties}")
//            println("PARAMETRI:")
//            //println t.args[0]
//        }

//        tasks.whenTaskAdded { task->
//            //println("I PARAMETRI PASSATI SONO: ${t.properties}")
//            //println("PARAMETRI:")
//            //println t.args[0]
////            tasks.withType(Exec){
////                println("DI TIPO EXEC!!!!!")
////            }
//            if(task.)
//        }

        tasks.withType(Test) {
            doLast {

                println("TASK DI TIPO TEST !!!!!!!!!!!!!!!!!!!!!!!!!!!")
            }
        }

        //print parameters
        tasks.whenTaskAdded { task ->
            //this.args.each{println it}

//            if(task.hasProperty("args")){
//                def argomenti = task.property("args")
//                println("proprieta' passate $argomenti")
//            } else {
//                //println("NON HA PROPRIETA' ARGS")
//            }
            //println(args.size())


//            println(args.size())
//
//            for (i = 0; i < args.size(); i++) {
//                println(i + ' ' + args[i])
//            }
        }
        //task().hasProperty(args)


//        tasks.whenTaskAdded(cli) {
//            println("AGGIUNTA TASK CON CLOSURE")
//        }

//        tasks.whenTaskAdded { task->
//            if(task.contains(':app:cli')){
//                println("CONTIENE !!!!!!!!!!!")
//            }else { println("NON LO CONTIENE!!!!!!!!!!!!!!!")}
//        }

//        tasks.contains(cli) { task ->
//            println("ecchilo")
////            task.finalizedBy {
//////                println ("QUELLO PRIMA ERA UN TIPO TEST !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
////                println("task che contiene la stringa!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
////            }
//        }

//        tasks.whenTaskAdded { task ->
//            task.finalizedBy {
//                    try{
//                        exec {
//                            //copia il file da emulatore a directory locale
//                            commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
//                        }
//                        //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                        //e legge per verifica
//                        //String fileContents = new File('JsonTestReport.json').text
//                        //println(fileContents)
//                        println("RIUSCITO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//                    } catch(all){
//                        println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                    }
//            }
//        }

        //tasks.whenObjectAdded { task -> task.finalizedBy{ println("AGGIUNTO OGGETTO!!!!!!!!!") } }

//        tasks.whenTaskAdded { task ->
//            if (task.class.simpleName == 'KotlinCompile_Decorated') {
//                task.finalizedBy {
//                    try{
//                        exec {
//                            //copia il file da emulatore a directory locale
//                            commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
//                        }
//                        //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                        //e legge per verifica
//                        //String fileContents = new File('JsonTestReport.json').text
//                        //println(fileContents)
//                        println("RIUSCITO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
//                    } catch(all){
//                        println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
//                    }
//            }
//            }
//        }
//        tasks.whenTaskAdded {task ->
//            println ("tipo :${task.class.simpleName}")
//        }

        tasks.withType(org.gradle.api.tasks.testing.Test) { t->
            println("ECCO LA SCRITTA DENTRo WITHTYPE ${t}")
            systemProperty 'host', 'DEV'

        }
    }


}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':instrumentedreport')
}