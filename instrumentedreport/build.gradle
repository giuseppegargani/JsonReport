//little documentation: https://stackoverflow.com/questions/61060401/how-to-access-gradle-defaultconfig-in-a-parent-gradle-file
/* DOCUMENTAZIONE:
    - GROOVY: https://www.groovy-lang.org/objectorientation.html
        Bel libro!!! https://livebook.manning.com/book/groovy-in-action-second-edition/chapter-18/
    - http://sorcersoft.org/project/site/gradle/userguide/multi_project_builds.html
    - HASPROPERTY: https://stackoverflow.com/questions/23190698/gradle-setting-a-subproject-property-from-another-subproject
    - CONCURRENCY IN GRADLE: https://docs.gradle.org/current/userguide/worker_api.html
        https://github.com/gradle/gradle/issues/7047
        THREADING: https://stackoverflow.com/questions/14370076/joining-thread-in-groovy
 */

/* SALVARE UNIT TESTS:
    - CONFIGURAZIONE GRADLE PER Lettura Unit Test: https://stackoverflow.com/questions/29341744/android-studio-unit-testing-read-data-input-file
    - MODO CORRETTO PER ACCEDERE AL CONTEXT : https://www.mo4tech.com/androidtest-the-correct-way-to-get-the-context.html
        https://stackoverflow.com/questions/62312312/how-to-unit-test-a-class-that-uses-context
    - APPLICATIONPROVIDER: https://developer.android.com/reference/androidx/test/core/app/ApplicationProvider
        GetDir()
        val appContext = ApplicationProvider.getApplicationContext<Context>()
     ...e si puo' usare anche con annota AndroidJUnit4!!! sia con Instrumentation che con ApplicationProvider!!!

     - Mockito.mock(Context::class)     https://stackoverflow.com/questions/34063848/how-to-mock-context-using-mockito

     - VOGELLA interessante!!!!! Mockito https://www.vogella.com/tutorials/Mockito/article.html

   SI DEVE VERIFICARE CHE SI POSSANO USARE MOCKITO O ALTRE ANNOTAZIONI NEL MODO CORRETTO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    task ucoodeTest() {
        def nomeapp = 'nome'

        doLast {
            project(':app') {
                nomeapp = it.android.defaultConfig.applicationId
                println "buildV:::: $nomeapp"
            }
        }
        doLast {
            try{
                exec {
                    //we could also put in just one line: '&&', 'adb', 'pull', 'sdcard/android/data/com.example.jsonreport/files/JsonTestReport.json'
                    commandLine 'adb', 'shell', 'am', 'instrument', '-w', "${nomeapp}.test/androidx.test.runner.AndroidJUnitRunner"
                }
                //println("The PREVIOUS report has been correctly transfered and if you want to update the REPORT please retry this OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
                //e legge per verifica
                //String fileContents = new File('JsonTestReport.json').text
                //println(fileContents)
            } catch(all){
                println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
            }
        }
        doLast {
            try{
                exec{
                    commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                }
                println("THE REPORT HAS BEEN TRANSFERED CORRECTLY")
                String fileContents = new File('JsonTestReport.json').text
                println(fileContents)
            } catch(all){
                println("THE REPORT HAS NOT YET BEEN TRANSFERED SO PLEASE RETRY OR MANUALLY PASS THE FILE TO THE ROOT PROJECT FOLDER BY TERMINAL: gradlew passReport")
            }

        }
    }

    //VERIFICARE CHE TRASFERISCA PER DIVERSI COMANDI TEST STRUMENTALE, CON IF CONDIZIONALE (NON ERRORE) E SENZA ANDROIDJUNITRUNNER
    task passReport () {

        def nomeapp = 'nome'

        doLast {
            project(':app') {
                nomeapp = it.android.defaultConfig.applicationId
                println "The package name is: $nomeapp"
            }
        }
        doLast {
            try{
                exec {
                    //copy the file from emulator to root project folder
                    commandLine 'adb', 'pull', "sdcard/android/data/${nomeapp}/files/JsonTestReport.json", '../'
                }
                println("The report has been correctly transfered to the root project folder")
                //e legge per verifica
                String fileContents = new File('JsonTestReport.json').text
                println(fileContents)
            } catch(all){
                println("SOME PROBLEM HAS OCCURED WITH THE MANUAL TRANSFER OF REPORT: please inform us by email")
            }
        }
    }

    task peppe() {
        //finalizedBy(':app:test')

        configure {
            testOptions {

                //testOrchestrator
                execution 'ANDROIDX_TEST_ORCHESTRATOR'

                unitTests.all {

                    afterTest { desc, result ->
                        logger.lifecycle("************ Beppe: NOME TEST: $desc e RISULTATO TEST: $result")
                    }
                }
            }

        }

        doFirst {
            println("DoFIRST DI BEPPE")
        }
        doLast {
            println("DOLAST DI BEPPE")
        }
    }

    project.ext.callback = { c ->
        println(c)
    }

}
class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('hello') {
            doLast {
                println 'Hello from the GreetingPlugin'
            }
        }
    }
}



dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    /*testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'*/

    //With implementation the dependency is available in all source sets, including the test source sets.
    implementation 'junit:junit:4.+'
    implementation 'androidx.test.ext:junit:1.1.3'
    implementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Dependency to print e read JsonString and objects
    implementation 'com.google.code.gson:gson:2.8.6'

    //qui vanno le tre dipendenze di mockito (forse sarebbe meglio metterne solamente uno e la piu' importante per evitare conflitti)
    implementation "org.mockito:mockito-core:3.+"
    implementation 'org.robolectric:robolectric:4.8'
}